from coroweb import get, postfrom apis import *from Models import User, Blog, Commentfrom Models import next_idfrom config import configsfrom aiohttp import webimport logging, time, hashlib, asyncio, re, asyncio, base64, json, markdown2COOKIE_NAME = 'awesession'_COOKIE_KEY = configs.session.secret# 后端API接口def check_admin(request):    if request.__user__ is None or not request.__user__.admin:        raise APIPermissionError()def get_page_index(page_str):    page_index = 1    try:        page_index = int(page_str)    except ValueError as e:        pass    if page_index < 1:        page_index = 1    return page_indexdef user2cookie(user, max_age):    # Generate cookie str by user    # build cookie string by:id-expires-sha1    expires = str(int(time.time() + max_age))    s = '%s-%s-%s-%s' % (user.id, user.passwd, expires, _COOKIE_KEY)    l = [user.id, expires, hashlib.sha1(s.encode('utf-8')).hexdigest()]    return '-'.join(l)async def cookie2user(cookie_str):    # Parse cookie and load user if cookie is valid    if not cookie_str:        return None    try:        l = cookie_str.split('-')        if len(l) != 3:            return None        uid, expires, sha1 = l        if int(expires) < time.time():            return None        user = await User.find(uid)        if user is None:            return None        s = '%s-%s-%s-%s' % (uid, user.passwd, expires, _COOKIE_KEY)        if sha1 != hashlib.sha1(s.encode('utf-8')).hexdigest():            logging.info('invalid sha1')            return None        user.passwd = '******'        return user    except Exception as e:        logging.exception(e)        return Nonedef text2html(text):    lines = map(lambda s: '<p>%s</p>' % s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;'), filter(lambda s: s.strip() != '', text.split('\n')))    return ''.join(lines)@post('/api/authenticate')async def authenticate(*, email, passwd):    if not email:        raise APIValueError('email', 'Invalid email.')    if not passwd:        raise APIValueError('password', 'Invalid password.')    users = await User.find_all('email=?', [email])    if len(users) == 0:        raise APIValueError('email', 'Email not exist.')    user = users[0]    # check password    sha1 = hashlib.sha1()    sha1.update(user.id.encode('utf-8'))    sha1.update(b':')    sha1.update(passwd.encode('utf-8'))    if user.passwd != sha1.hexdigest():        raise APIValueError('passwd', 'Invalid password.')    # authenticate ok, set cookie    r = web.Response()    r.set_cookie(COOKIE_NAME, user2cookie(user, 86400), max_age=86400, httponly=True)    user.passwd = '******'    r.content_type = 'application/json'    r.body = json.dumps(user, ensure_ascii=False).encode('utf-8')    return r_RE_EMAIL = re.compile(r'^[a-z0-9\.\-\_]+\@[a-z0-9\-\_]+(\.[a-z0-9\-\_]+){1,4}$')_RE_SHA1 = re.compile(r'^[0-9a-f]{40}$')@get('/api/users')#用户列表async def api_get_users(*, page=1):    page_index = get_page_index(page)    num = await User.find_number('count(id)')    if num is None or num == 0:        return dict(page=0, users=())    p = Page(item_count=num, page_index=page_index)    users = await User.find_all(orderBy='created_at desc', limit=(p.offset, p.limit))    for u in users:        u.passwd = '******'    return dict(users=users, page=p)@post('/api/user/create')#用户创建async def api_register_user(*, email, name, passwd):    if not name or not name.strip():        raise APIValueError('name')    if not email or not _RE_EMAIL.match(email):        raise APIValueError('email')    if not passwd or not _RE_SHA1.match(passwd):        raise APIValueError('passwd')    users = await User.find_all('email=?', [email])    if len(users) > 0:        raise APIError('register:failed', 'email', 'Email is already in use.')    uid = next_id()    sha1_passwd = '%s:%s' % (uid, passwd)    user = User(id=uid, name=name.strip(), email=email, passwd=hashlib.sha1(sha1_passwd.encode('utf-8')).hexdigest(), image='http://www.gravatar.com/avatar/%s?d=mm&s=120' % hashlib.md5(email.encode('utf-8')).hexdigest())    await user.save()    # make session cookie    r = web.Response()    r.set_cookie(COOKIE_NAME, user2cookie(user, 86400), max_age=86400, httponly=True)    user.passwd = '******'    r.content_type = 'application/json'    r.body = json.dumps(user, ensure_ascii=False).encode('utf-8')    return r@get('/api/blogs')#分页获取blogs列表async def api_blogs(*, page=1):    page_index = get_page_index(page)    num = await Blog.find_number('count(id)')    if num is None or num == 0:        return dict(page=0, blogs=())    p = Page(item_count=num, page_index=page_index)    blogs = await Blog.find_all(orderBy='created_at desc', limit=(p.offset, p.limit))    return dict(page=p, blogs=blogs)@get('/api/blogs/{id}')#获取blog信息async def api_get_blog(*, id):    blog = await Blog.find(id)    return blog@post('/api/blog/create')#创建blogasync def api_create_blog(request, *, name, summary, contend):    if not name or not name.strip():        raise APIValueError('name', 'name cannot be empty.')    if not summary or not summary.strip():        raise APIValueError('summary', 'summary cannot be empty.')    if not contend or not contend.strip():        raise APIValueError('content', 'content cannot be empty.')    blog = Blog(user_id=request.__user__.id, user_name=request.__user__.name, user_image=request.__user__.image,                name=name.strip(), summary=summary.strip(), contend=contend.strip())    await blog.save()    return blog@post('/api/blog/edit')#修改blogasync def api_update_blog(request, *, id, name, summary, contend):    blog = await Blog.find(id)    if blog.name != name or blog.summary != summary or blog.contend != contend:        if not name or not name.strip():            raise APIValueError('name', 'name cannot be empty.')        if not summary or not summary.strip():            raise APIValueError('summary', 'summary cannot be empty.')        if not contend or not contend.strip():            raise APIValueError('content', 'content cannot be empty.')    blog.name = name    blog.summary = summary    blog.contend = contend    await blog.update()    return blog@post('/api/blog/delete/{id}')  #删除blog的接口async def api_blog_del(*, id, request):    check_admin(request)    blog = Blog(id=id)    if blog is None:        raise APIResourceNotFoundError('blog', 'blog is not found')    await Comment.remove_all('blog_id=?', [id])    await blog.remove()    return dict(id=id)@post('/api/blog/comment/create/{blog_id}')async def api_comment_create(blog_id, request, *, content):    user = request.__user__    if user is None:        raise APIValueError('user', 'user cannot be empty.')    if not content or not content.strip():        raise APIValueError('content', 'content cannot be empty.')    blog = await Blog.find(blog_id)    if not blog_id or not blog_id.strip():        raise APIValueError('blog', 'blog is not found.')    comment = Comment(id=next_id(), blog_id=blog_id, user_id=user.id, user_name=user.name, user_image=user.image, content=content)    await comment.save()    return comment@get('/api/comments')async def api_comments(*, page=1):    page_index = get_page_index(page)    num = await Comment.find_number('count(id)')    if num is None or num ==0:        return dict(page=0, comments=())    p = Page(item_count=num, page_index=page_index)    comments = await Comment.find_all(orderBy='created_at desc', limit=(p.offset, p.limit))    return dict(page=p, comments=comments)@post('/api/comment/delete/{id}')async def api_comment_delete(id, request):    check_admin(request)    comment = await Comment.find(id)    if comment is None:        raise APIResourceNotFoundError('comment', 'comment is not found')    await comment.remove()    return dict(id=id)# 用户浏览页面@get('/')#首页async def index(request):    blogs = await Blog.find_all()    return {        '__template__': 'blogs.html',        'blogs': blogs    }@get('/register')#用户注册def resigser():    return {        '__template__': 'register.html'    }@get('/signin') #用户登录def signin():    return {        '__template__': 'signin.html'    }@get('/signout')#退出登录def signout(request):    referer = request.headers.get('Referer')    r = web.HTTPFound(referer or '/')    r.set_cookie(COOKIE_NAME, '-deleted-', max_age=0, httponly=True)    logging.info('user signed out.')    return r@get('/blog/detail/{id}')  #blog日志详情async def get_blog(id):    blog = await Blog.find(id)    comments = await Comment.find_all('blog_id=?', [id], orderBy='created_at desc')    for c in comments:        c.html_content = text2html(c.content)    blog.html_content = markdown2.markdown(blog.contend)    return {        '__template__': 'blog_detail.html',        'blog': blog,        'comments': comments    }# 管理页面@get('/manage/blog/create') #blog创建页面def manage_create_blog():    return {        '__template__': 'manage_blog_edit.html',        'id': '',        'action': '/api/blog/create'    }@get('/manage/blogs/list')  #blog管理列表页面def manage_blogs_list_html(*, page='1'):    return {        '__template__': 'manage_blogs_list.html',        'page_index': get_page_index(page)    }@get('/manage/blog/edit/{id}') #blog编辑页面async def manage_blog_edit_html(*, id):    return {        '__template__': "manage_blog_edit.html",        'id': id,        'action': '/api/blog/edit'    }@get('/manage/blog/comments')#blogs评论列表async def manage_blogs_comments_html():    return {        '__template__': 'manage_blogs_comments_list.html',        'page_index': 1    }@get('/manage/users')def manage_users(*, page='1'):    return {        '__template__': 'manage_users_list.html',        'page_index': get_page_index(page)    }